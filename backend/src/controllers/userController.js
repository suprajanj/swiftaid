import bcrypt from "bcryptjs";
import User from "../model/User.js";
import nodemailer from "nodemailer";

// @desc    Create new user (Sign Up)
export const createUser = async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      nic,
      email,
      password,
      confirmPassword,
      mobile,
      address,
      gender,
      dob,
      termsAccepted,
    } = req.body;

    // 1️⃣ Validate required fields
    if (
      !firstName ||
      !lastName ||
      !nic ||
      !email ||
      !password ||
      !confirmPassword ||
      !mobile ||
      !address ||
      !gender ||
      !dob
    ) {
      return res.status(400).json({ message: "All fields are required" });
    }

    // 2️⃣ Check passwords
    if (password !== confirmPassword) {
      return res.status(400).json({ message: "Passwords do not match" });
    }

    // 3️⃣ Check existing user by email or NIC
    const existingUser = await User.findOne({ $or: [{ email }, { nic }] });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "Email or NIC already registered" });
    }

    // 4️⃣ Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // 5️⃣ Create user (userId is auto-generated by model pre-save hook)
    const newUser = new User({
      firstName,
      lastName,
      nic,
      email,
      password: hashedPassword,
      mobile,
      address,
      gender,
      dob,
      termsAccepted,
    });

    await newUser.save();

    res.status(201).json({
      message: "User created successfully",
      userId: newUser.userId, // send back userId like C001
      email: newUser.email,
    });
  } catch (error) {
    console.error("Error creating user:", error);
    res.status(500).json({ message: "Server error. Please try again later." });
  }
};

// @desc    Get all users (for admin)
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password"); // hide password
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: "Failed to fetch users" });
  }
};

// @desc    Get single user by ID
export const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-password");
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: "Error fetching user" });
  }
};

// @desc    Delete user
export const deleteUser = async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json({ message: "User deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting user" });
  }
};

// @desc    Update user
export const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updates = { ...req.body };

    // If password is being updated, hash it
    if (updates.password) {
      updates.password = await bcrypt.hash(updates.password, 10);
    }

    const updatedUser = await User.findByIdAndUpdate(id, updates, {
      new: true,
    }).select("-password");

    if (!updatedUser)
      return res.status(404).json({ message: "User not found" });

    res.status(200).json({
      message: "User updated successfully",
      user: updatedUser,
    });
  } catch (error) {
    console.error("Error updating user:", error);
    res.status(500).json({ message: "Error updating user" });
  }
};

// LOGIN PART

// In-memory OTP store
const otpStore = {}; // { userId: { otp: 123456, expires: Date } }

// Login user and send OTP
export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password)
      return res.status(400).json({ message: "Email and password required" });

    // 1️⃣ Find user in DB
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User not found" });

    // 2️⃣ Compare password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Invalid password" });

    // 3️⃣ Generate OTP
    const otp = Math.floor(100000 + Math.random() * 900000);
    const expires = new Date(Date.now() + 5 * 60 * 1000); // 5 min
    otpStore[user._id] = { otp, expires };

    // 4️⃣ Send OTP via email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "Your OTP Code",
      text: `Your OTP is ${otp}. It expires in 5 minutes.`,
    });

    res.status(200).json({ message: "OTP sent to email", userId: user._id });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "Server error" });
  }
};

// Verify OTP
export const verifyOTP = (req, res) => {
  try {
    const { userId, otp } = req.body;

    if (!userId || !otp) {
      return res.status(400).json({ message: "User ID and OTP required" });
    }

    const record = otpStore[userId];
    if (!record)
      return res
        .status(400)
        .json({ message: "No OTP found. Please login again." });

    const now = new Date();
    if (record.expires < now) {
      delete otpStore[userId]; // remove expired OTP
      return res
        .status(400)
        .json({ message: "OTP expired. Please login again." });
    }

    if (parseInt(otp) !== record.otp) {
      return res.status(400).json({ message: "Invalid OTP" });
    }

    // OTP is correct, delete from store
    delete otpStore[userId];

    // You can now create JWT or session
    res.status(200).json({ message: "OTP verified successfully", userId });
  } catch (error) {
    console.error("OTP verification error:", error);
    res.status(500).json({ message: "Server error" });
  }
};
