import fs from "fs";
import path from "path";
import { Parser } from "json2csv";
import PDFDocument from "pdfkit";
import SOS from "../models/sos.js"; // your actual SOS model path

export const generateReports = async (req, res) => {
  try {
    const sosData = await SOS.find().populate("assignedResponder");

    if (!sosData || sosData.length === 0) {
      return res.status(404).json({ message: "No SOS data available" });
    }

    // Ensure reports directory exists
    const reportsDir = path.join(process.cwd(), "reports");
    if (!fs.existsSync(reportsDir)) fs.mkdirSync(reportsDir);

    // === CSV Generation ===
    const csvFields = [
      "name",
      "age",
      "number",
      "emergency",
      "status",
      "createdAt",
      "acceptedAt",
      "completedAt",
      "comment",
      "assignedResponder.name",
      "assignedResponder.responderType",
      "assignedResponder.contactNumber",
    ];

    const parser = new Parser({ fields: csvFields });
    const csv = parser.parse(sosData.map((s) => s.toObject()));
    const csvPath = path.join(reportsDir, "sos_report.csv");
    fs.writeFileSync(csvPath, csv);

    // === PDF Generation ===
    const pdfPath = path.join(reportsDir, "sos_report.pdf");
    const doc = new PDFDocument({ margin: 50 });
    const pdfStream = fs.createWriteStream(pdfPath);
    doc.pipe(pdfStream);

    // ---- Header Section ----
    doc
      .fontSize(22)
      .fillColor("#d32f2f")
      .text("ðŸš¨ SwiftAid SOS Report", { align: "center" })
      .moveDown(0.5);

    doc
      .fontSize(12)
      .fillColor("black")
      .text(`Generated on: ${new Date().toLocaleString()}`, { align: "right" })
      .moveDown(1);

    // ---- Table Header ----
    const tableHeaders = [
      "No.",
      "Requester",
      "Emergency",
      "Responder",
      "Contact",
      "Status",
      "Created",
    ];

    const colWidths = [40, 100, 100, 100, 90, 80, 100];
    const startY = doc.y;
    let y = startY;

    doc.fontSize(11).fillColor("white").rect(50, y, 500, 20).fill("#d32f2f");
    doc.fillColor("white");

    let x = 55;
    for (let i = 0; i < tableHeaders.length; i++) {
      doc.text(tableHeaders[i], x, y + 5, { width: colWidths[i], align: "left" });
      x += colWidths[i];
    }

    // ---- Table Rows ----
    y += 25;
    doc.fillColor("black");

    sosData.forEach((s, i) => {
      x = 55;

      const row = [
        i + 1,
        s.name,
        s.emergency,
        s.assignedResponder ? s.assignedResponder.name : "Unassigned",
        s.assignedResponder ? s.assignedResponder.contactNumber : "N/A",
        s.status,
        new Date(s.createdAt).toLocaleString(),
      ];

      // Alternate row background
      if (i % 2 === 0) {
        doc.rect(50, y - 3, 500, 20).fill("#f5f5f5").fillColor("black");
      }

      for (let j = 0; j < row.length; j++) {
        doc.text(String(row[j]), x, y, { width: colWidths[j], align: "left" });
        x += colWidths[j];
      }

      y += 22;
      if (y > 720) {
        doc.addPage();
        y = 60;
      }
    });

    // ---- Footer ----
    doc.moveDown(2);
    doc.fontSize(10).fillColor("gray");
    doc.text(
      "This report is auto-generated by SwiftAid Emergency Management System.",
      50,
      760,
      { align: "center", width: 500 }
    );

    doc.end();

    pdfStream.on("finish", () => {
      res.status(200).json({
        csv: `${req.protocol}://${req.get("host")}/reports/sos_report.csv`,
        pdf: `${req.protocol}://${req.get("host")}/reports/sos_report.pdf`,
      });
    });
  } catch (err) {
    console.error("Error generating reports:", err);
    res.status(500).json({ message: "Failed to generate reports" });
  }
};
